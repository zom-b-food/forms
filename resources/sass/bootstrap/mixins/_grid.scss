// Grid system
//
// Generate semantic grid columns with these mixins.
@import "../../variables/variables";


@mixin media($size) {

    @if $size == "small-up" or $size == "medium-up" or $size == "large-up" or $size == "large-only" {
    // ...output the content the user gave us.
      @content;
    }
  }

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
@mixin block-grid-aligned($per-row, $spacing) {
  @for $i from 1 through $block-grid-elements {
    @if $per-row >= $i {
      $grid-column: '+' + $i;
      @if $per-row == $i {
        $grid-column: '';
      }
      &:nth-of-type(#{$per-row}n#{unquote($grid-column)}) {
        padding-left: ($spacing - (($spacing / $per-row) * ($per-row - ($i - 1))));
        padding-right: ($spacing - (($spacing / $per-row) * $i));
      }
    }
  }
}

//
// Grid Functions
//
// @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
@function grid-calc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}
//
// @mixins
//
// For creating container, nested, and collapsed rows.
//
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
@mixin grid-row($behavior: false) {
// use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-#{$default-float}: -($column-gutter/2);
    margin-#{$opposite-direction}: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }
  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }
  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }
  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }
// Clearfix for all rows
  @include clearfix();
}
// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
$columns:false,
$last-column:false,
$center:false,
$offset:false,
$push:false,
$pull:false,
$collapse:false,
$float:true,
$position:false) {
// If positioned for default .column, include relative position
// push and pull require position set
  @if $position or $push or $pull {
    position: relative;
  }
// If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }
  // Gutter padding whenever a column isn't set to collapse
  // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: ($column-gutter / 2);
    padding-right: ($column-gutter / 2);
  }
// If a column number is given, calculate width
  @if $columns {
    width: grid-calc($columns, $total-columns);
  // If last column, float naturally instead of to the right
    @if $last-column { float: $opposite-direction; }
  }
// Source Ordering, adds left/right depending on which you use.
  @if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
  @if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }
  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }
// If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none;
  }
// If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }
}
// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
@mixin grid-html-classes($size) {
  @for $i from 0 through $total-columns - 1 {
    .#{$size}-push-#{$i} {
      @include grid-column($push:$i, $collapse:null, $float:false);
    }
    .#{$size}-pull-#{$i} {
      @include grid-column($pull:$i, $collapse:null, $float:false);
    }
  }
  .column,
  .columns { @include grid-column($columns:false, $position:true); }
  @for $i from 1 through $total-columns {
    .#{$size}-#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
  }
  @for $i from 0 through $total-columns - 1 {
    .#{$size}-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
  }
  .#{$size}-reset-order {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    left: auto;
    right: auto;
    float: $default-float;
  }
  .column.#{$size}-centered,
  .columns.#{$size}-centered { @include grid-column($center:true, $collapse:null, $float:false); }
  .column.#{$size}-uncentered,
  .columns.#{$size}-uncentered {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    float: $default-float;
  }
// Fighting [class*="column"] + [class*="column"]:last-child
  .column.#{$size}-centered:last-child,
  .columns.#{$size}-centered:last-child{
    float: none;
  }
// Fighting .column.<previous-size>-centered:last-child
  .column.#{$size}-uncentered:last-child,
  .columns.#{$size}-uncentered:last-child {
    float: $default-float;
  }
  .column.#{$size}-uncentered.opposite,
  .columns.#{$size}-uncentered.opposite {
    float: $opposite-direction;
  }
}

// standard grid classes
@if $include-html-grid-classes {
  .row {
    @include grid-row;
    &.collapse {
      > .column,
      > .columns { @include grid-column($collapse:true, $float:false); }
      .row {margin-left:0; margin-right:0;}
    }
    .row { @include grid-row($behavior:nest);
      &.collapse { @include grid-row($behavior:nest-collapse); }
    }
  }
  .column,
  .columns { @include grid-column($columns:$total-columns); }
  [class*="column"] + [class*="column"]:last-child { float: $last-child-float; }
  [class*="column"] + [class*="column"].end { float: $default-float; }
  @include media(large-up) {
    @include grid-html-classes($size:small);
  }
  @include media(medium-up) {
    @include grid-html-classes($size:medium);
    // Old push and pull classes
    @for $i from 0 through $total-columns - 1 {
      .push-#{$i} {
        @include grid-column($push:$i, $collapse:null, $float:false);
      }
      .pull-#{$i} {
        @include grid-column($pull:$i, $collapse:null, $float:false);
      }
    }
  }
  @include media(large-up) {
    @include grid-html-classes($size:large);
    @for $i from 0 through $total-columns - 1 {
      .push-#{$i} {
        @include grid-column($push:$i, $collapse:null, $float:false);
      }
      .pull-#{$i} {
        @include grid-column($pull:$i, $collapse:null, $float:false);
      }
    }
  }
}
@if $include-xl-html-grid-classes {
  @include media(xlarge-up) {
    @include grid-html-classes($size:xlarge);
  }
  @include media(xxlarge-up) {
    @include grid-html-classes($size:xxlarge);
  }
}


// grid cells
@mixin grid(
$small-count: $grid-cell-small-count,
$medium-count: $grid-cell-medium-count,
$large-count: $grid-cell-large-count,
$child-element: '> .cell',
$include-spacing:true,
$spacing:$block-grid-default-spacing
) {

  float: left;
  padding-left: 0;
  width: 100%;
  #{$child-element} {
    float: left;
    @if $include-spacing {
      margin-bottom: $spacing;
    }
  }
// default
  @media #{$small-only} {
    #{$child-element} {
      width: percentage(1 / $small-count);
      @if $include-spacing {
        &:nth-of-type(#{$small-count}n+1) {
          clear: both;
        }
        @include block-grid-aligned($small-count, $spacing);
      }
    }
  }
  @media #{$medium-only} {
    #{$child-element} {
      width: percentage(1 / $medium-count);
      @if $include-spacing {
        &:nth-of-type(#{$medium-count}n+1) {
          clear: both;
        }
        @include block-grid-aligned($medium-count, $spacing);
      }
    }
  }
  @media #{$large-up} {
    #{$child-element} {
      width: percentage(1 / $large-count);
      @if $include-spacing {
        &:nth-of-type(#{$large-count}n+1) {
          clear: both;
        }
        @include block-grid-aligned($large-count, $spacing);
      }
    }
  }
  #{$child-element}:last-child {
    float: left !important;
  }
}


// Data attribute namespace
// styles get applied to [data-mysite-plugin], etc
$namespace: false !default;

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with browser-based text zoom or user-set defaults.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be different and not have it affect the grid breakpoints,
// set $rem-base to $base-font-size and make sure $base-font-size is a px value.
$base-font-size: 100% !default;

// $base-line-height is 24px while $base-font-size is 16px
$base-line-height: 1.5 !default;



@mixin color($color) {
  color: $color !important;
  * {
    color: $color !important;
  }
}
@mixin bg-color($color) {
  background-color: $color !important;
}

//
// Global Foundation Mixins
//

// @mixins
//
// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius:$global-radius) {
  @if $radius {
    border-radius: $radius;
  }
}

// @mixins
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius:$global-radius) {
  @if ($side == left or $side == right) {
    -webkit-border-bottom-#{$side}-radius: $radius;
    -webkit-border-top-#{$side}-radius: $radius;
    border-bottom-#{$side}-radius: $radius;
    border-top-#{$side}-radius: $radius;
  } @else {
    -webkit-#{$side}-left-radius: $radius;
    -webkit-#{$side}-right-radius: $radius;
    border-#{$side}-left-radius: $radius;
    border-#{$side}-right-radius: $radius;
  }
}

// @mixins
//
// We can control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
@mixin inset-shadow($active:true) {
  box-shadow: $shiny-edge-size $shiny-edge-color inset;

  @if $active { &:active {
    box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
}

// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  transition: $property $speed $ease;
}

// @mixins
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  -webkit-box-sizing: $type; // Android < 2.3, iOS < 4
  -moz-box-sizing: $type;
  box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}


@mixin hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
  span::after {
    content: "";
    display: block;
    height: 0;
    position: absolute;

    @if $offcanvas {
      @if $top {
        top: $top;
      }
      @else {
        top: 50%;
        margin-top: (-$width/2);
      }
      @if $left {
        left: $left;
      }
      @else {
        left: ($tabbar-menu-icon-width - $width)/2;
      }
    }
    @else {
      margin-top: -($width/2);
      top: 50%;
      #{$opposite-direction}: $topbar-link-padding;
    }

    box-shadow:
      0 0 0 $thickness $color,
      0 $gap + $thickness 0 $thickness $color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $color;
    width: $width;
  }
  span:hover:after {
    box-shadow:
      0 0 0 $thickness $hover-color,
      0 $gap + $thickness 0 $thickness $hover-color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color;
  }
}

// We use this to do clear floats
@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

// @mixins
//
// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
  transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

  &:#{$selector} {
    border-color: $glowing-effect-color;
    box-shadow: 0 0 5px $glowing-effect-color;
  }
}

@mixin menu-pointer(
$color1: $white,
$color2: $gray-medium,
$right: 18px,
$left: auto,
$top: -21px) {

// pointer
  &:after, &:before {
    border: solid transparent;
    content: " ";
    height: 0;
    left: $left;
    pointer-events: none;
    position: absolute;
    right: $right;
    top: $top;
    width: 0;
  }

  &:after {
    border-color: rgba($color1, 0);
    border-bottom-color: $color1;
    border-width: 11px;
    margin-left: -12px;
  }
  &:before {
    border-color: rgba($color2, 0);
    border-bottom-color: $color2;
    border-width: 10px;
    margin-left: -11px;

  }
}

// @mixins
//
// We use this to translate elements in 2D
// $horizontal: Default: 0
// $vertical: Default: 0
@mixin translate2d($horizontal:0, $vertical:0) {
  transform: translate($horizontal, $vertical)
}

@mixin translate($x, $y) {
  -ms-transform: translate($x, $y); /* IE 9 */
  -webkit-transform: translate($x, $y); /* Chrome, Safari, Opera */
  transform: translate($x, $y);
}

@mixin translateX($x) {
  -ms-transform: translateX($x); /* IE 9 */
  -webkit-transform: translateX($x); /* Chrome, Safari, Opera */
  transform: translateX($x);
}

@mixin translateY($y) {
  -ms-transform: translateY($y); /* IE 9 */
  -webkit-transform: translateY($y); /* Chrome, Safari, Opera */
  transform: translateY($y);
}

@mixin rotate($deg) {
  -ms-transform: rotate($deg); /* IE 9 */
  -webkit-transform: rotate($deg); /* Chrome, Safari, Opera */
  transform: rotate($deg);
}

// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute !important;
  width: 1px;
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}

// Please do NOT use this folder for declaring Sass code that actually outputs CSS.

// Default Mixins to use at will!

// Take a px and convert to rem
@function calculateRem($values) {

  @if $supports-rem {
    $max: length($values);

    @if $max == 1 { @return convert-to-rem(nth($values, 1)); }

    $remValues: ();
    @for $i from 1 through $max {
      $remValues: append($remValues, convert-to-rem(nth($values, $i)));
    }
    @return $remValues;
  }
  @else {
    @return $values; //just use value we were provided
  }

}

@mixin font-size($size) {
  font-size: calculateRem($size);
}

@mixin rem-size($attribute, $sizes) {
  #{$attribute}: calculateRem($sizes);
}

// Set all transitions across browsers
@mixin transition($property: all, $duration: .4s, $easing: ease-in-out) {
  -webkit-transition: $property, $duration, $easing;
  -moz-transition: $property, $duration, $easing;
  -ms-transition: $property, $duration, $easing;
  -o-transition: $property, $duration, $easing;
  transition: $property, $duration, $easing;
}

// Set drop shadows on elements
@mixin box-shadow($top, $left, $blur, $color, $inset: false, $spread: 0) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $spread $color;
    -o-box-shadow:inset $top $left $blur $spread $color;
    -moz-box-shadow:inset $top $left $blur $spread $color;
    box-shadow:inset $top $left $blur $spread $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $spread $color;
    -o-box-shadow: $top $left $blur $spread $color;
    -moz-box-shadow: $top $left $blur $spread $color;
    box-shadow: $top $left $blur $spread $color;
  }
}
@mixin box-shadow-none() {
  -moz-box-shadow: none;
  -o-box-shadow: none;
  -webkit-box-shadow: none;
  box-shadow: none;
}

// Sets rounded corners on elements
@mixin rounded($radius: 0.3em) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

// Sets shadows on text if desired
@mixin text-shadow($top: 0, $left: 1px, $blur: 1px, $color: rgba(0,0,0,.3)) {
  text-shadow: $top $left $blur $color;
}

//cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

//Add box-sizing across browser prefixes
@mixin box-sizing($type: border-box) {
  -webkit-box-sizing: $type; // Android < 2.3, iOS < 4
  -moz-box-sizing: $type; // Firefox < 29
  box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}

@mixin unlist {
  margin:0;
  padding:0;
  list-style: none;
}

//keeps the page from selecting text on doubleclick actions
@mixin no-select {
  -webkit-user-select: none; /* webkit (safari, chrome) browsers */
  -moz-user-select: none; /* mozilla browsers */
  -ms-user-select: none; /* IE10+ */
  user-select: none;
}

// Visible and focuasable on screen readers
@mixin sr-only {
  border: 0 none;
  clip: rect(0px, 0px, 0px, 0px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
@mixin sr-only-focusable {
  &:active, &:focus{
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

@mixin constrain-width {
  max-width: $row-width;
  margin:0 auto;
}

// style placeholder (just send in content rules you want to style)
// @include placeholder{font-style:italic; color:#ccc; font-weight:300;}
@mixin placeholder {
  ::-webkit-input-placeholder {@content;}
  :-moz-placeholder           {@content;}
  ::-moz-placeholder          {@content;}
  :-ms-input-placeholder      {@content;}
}



// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// Helper to align inline icons to midline of text
@mixin align-icon-middle($margin-top:-3px) {
  display:inline-block;
  vertical-align:middle;
  @include rem-size(margin-top, $margin-top);
}

// Mixin presets //
@mixin nav-color ($arg1, $arg2) {
  background-color: $arg1;
  color: $arg2;
}

@mixin button-color ($arg1, $arg2) {
  background-color: $arg1;
  color: $arg2;
}

@mixin tile-color ($arg1, $arg2) {
  background-color: $arg1;
  color: $arg2;
}

@mixin title ($arg1, $arg2) {
  font-family: $arg1;
  font-size: $arg2;
}


@mixin sprite-position($width, $height, $index, $spriteSpacing: 5) {
  @if $index == 0 {
    background-position: 0 0;
  }
  @if $index > 0 {
    background-position: -(($index * $spriteSpacing) + ($width * $index)) 0;
  }
  height:$height;
  width:$width;
}

@mixin sprite($imgUrl, $imgUrl2x, $imgWidth, $imgHeight) {
  background: transparent;
  background-image: url($imgUrl);
  background-repeat: no-repeat;
  display:inline-block;
  text-indent: 110%;
  white-space: nowrap;
  overflow: hidden;
  vertical-align:middle;
  margin-top: -.2em;


}

